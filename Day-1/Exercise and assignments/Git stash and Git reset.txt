## Reset to a version in repository:

## The log always shows the current HEAD first. Now if we want to reset the HEAD to the state as pointed by the arrow, we can use the command,

$ git reset <version-hash-code>   

## This will reset the HEAD to the commit status as shown. Care has to be taken while resetting the HEAD to earlier state as all changes after this commit would be lost.
Reset command has three options, Hard, Mixed and Soft.

$ git reset --hard <version-hash-code> 

## file and hash object is removed from work directory and repo database.

$ git reset --mixed <version-hash-code> 

## files are moved into work directory, but hash object is removed from repo database (garbage collected)

$ git reset --soft <version-hash-code> 

## files are moved into staging and hash object for subsequent commits are removed (garbage collected).

Stash operations:

$ git stash 

## this command gets applied to the files in work area. Once applied the files are moved to temporary storage area which git manages.

$ git stash apply 

## the apply option with stash gets the files back into work area.
$ git stash drop 

## the drop option deletes all files that area stashed.
## Listing the stash elements.

$ git stash list 

## this will list all stashes as stash@{0}, stash@{1} â€¦.

$ git stash show -p stash@{1} 

## this command shows details about a particular stash.
## The latest stash created is stored in refs/stash. Older stashed are found in reflog of this reference and can be named using the usual reflog syntax (e.g. stash@{0} is the most recently created stash, stash@{1} is the one before it, stash@{2.hours.ago} is also possible).
Few more with Stash

$ git stash save "describe it"   # give the stash a name
$ git stash clear                # delete a stashed commit
$ git stash save --keep-index    # stash only unstaged files

