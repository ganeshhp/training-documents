
### existing kubernetes-admin user authentication data is present in the ~/.kube/config file. we will extract the certificate from the file and see the human readable detail from the user certificate.

$ kubectl config view --raw -o jsonpath='{.users[*].user.client-certificate-data}' | base64 --decode > admin.crt

$ openssl x509 -in admin.crt -text -noout | head

### in the output you will see that the user in this case is the kubernetes-admin that has system:master group membership.

## try running the command,

$ kubectl get pods -v 6

### in the output you will see which config file is used, which server it connecting as the control plane server.
### let's get rid of the crt file created.

$ rm admin.crt

--------------------
## let's see which service account is used currently.

$ kubectl get serviceaccounts

$ kubectl describe serviceaccount default

### observe the secret referred in the service account.
---------------------------------------------

### creating a new service account

## create a file svc-accnt.yml

$ nano svc-accnt.yml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: mysvc-accnt
  namespace: webapp

## Imperatively we can create the service account using below command.

$ kubectl create serviceaccount mysvc-accnt --namespace=webapp

### referring the service account in POD spec. If we do not specify a service account in the POD template, the default service account is used. incase if the ServiceAccount is not present, the POD creation will fail.

template:
 ...
 spec:
   serviceAccount: mysvc-accnt
   containers:
   - image: nginx
     name: webserver

## check the details of service account

$ kubectl describe serviceaccount mysvc-accnt

## let's use the svc account in the pod template.

$ nano deploy-svcaccnt.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-svc-accnt
  namespace: webapp
spec:
  selector:
    matchLabels:
      app: myapp-svc
  template:
    metadata:
      labels:
        app: myapp-svc
    spec:
      serviceAccountName: mysvc-accnt
      containers:
      - name: myapp-svc
        image: httpd:2.4
        ports:
        - containerPort: 80

$ kubectl create -f deploy-svcaccnt.yml

$ kubectl get pods -n=webapp

$ kubectl get pod/<podname> -o yaml

$ kubectl describe pod/<podname> --namespace=webapp

## observe that the secret is automatically created and is mounted as a volume in the POD that's been created.
## Also check the location where the secret is mounted inside the container. So the secret object is referred inside the POD as a volume.

## we can also use the user impersonation to help us with our authorization testing.

$ kubectl auth can-i list pods --as=system:serviceaccount:webapp:mysvc-accnt -n webapp

$ kubectl get pods -v 6 --as=system:serviceaccount:webapp:mysvc-accnt

### manage authorization for service account using RBAC

$ kubectl create role demorole --verb=get,list --resource=pods

$ kubectl create rolebinding demorolebinding --role=demorole --serviceaccount=webapp:mysvc-accnt -n webapp

$ kubectl auth can-i list pods --as=system:serviceaccount:webapp:mysvc-accnt -n webapp



