### Using secrets and config maps to store variables that may or may not have critical / sensitive information.

## run below command to create a secret.

$ kubectl create secret generic app1 \
  --from-literal=USERNAME=app1login \
  --from-literal=PASSWORD='S0methingS@Strong!' \
  --namespace=webapp

$ kubectl get secrets --namespace=webapp

$ kubectl describe secret app1 --namespace=webapp

### we can try to retrieve the data stored in the key value pair in secret, but this being base64 coded, we get random char.

$ echo $(kubectl get secret app1 --namespace=webapp --template={{.data.USERNAME}} )

$ echo $(kubectl get secret app1 --namespace=webapp --template={{.data.USERNAME}} | base64 --decode )

$ echo $(kubectl get secret app1 --namespace=webapp --template={{.data.PASSWORD}} )

$ echo $(kubectl get secret app1 --namespace=webapp --template={{.data.PASSWORD}} | base64 --decode )

---------------------------------

### access the secret in POD as environment variables

open the yaml file 'secret-env-deploy.yaml' in editor and understand the way secret is used n POD as environment variable.

$ kubectl create -f secret-env-deploy.yaml

$ kubectl get pods --namespace=webapp

$ kubectl exec -it <podname> -- /bin/bash

$ printenv | grep ^app1

$ exit

--------------------------------------

#### Now try using the secret as a file in the POD.

$ kubectl create -f secret-file-deploy.yaml

$ kubectl get pods --namespace=webapp

$ kubectl describe pod/<podname>

$ kubectl exec -it <podname> -- /bin/bash

$ ls /etc/appconfig

$ cat /etc/appconfig/USERNAME
$ cat /etc/appconfig/PASSSWORD

$ exit

----------------------------------------

### creating secret of container-registry type

$ kubectl create secret docker-registry prvt-reg-cred \
    --docker-email=<docker-registry-email> \
    --docker-username=<docker-registry-user-name> \
    --docker-password=<docker-registry-password> \
    --docker-server=https://index.docker.io/v2/

$ kubectl get secret prvt-reg-cred -o jsonpath='{.data.*}' | base64 -d